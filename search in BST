package com.dsa;

import com.dsa.BST.Node;

public class example_dsa {
	static class Node{
		 int data;
		 Node left;
		 Node right;
		 
		 Node(int data){
			 this.data=data;
		 }
	}
	
//inseart Node in BST*********************
	public static Node insert(Node root,int key) {
		if(root==null) {
			root=new Node(key);
			return root;
		}
		if(root.data>key) {
			//left data
			root.left=insert(root.left,key);
		}
		else {
			//right data
			root.right=insert(root.right,key);
		}
		return root;
		
	}
	public static void inorder(Node root) {
		
		if(root==null) {
			return;
		}
		inorder(root.left);  // in the inorder  first left,root,right put the value
		System.out.print(root.data+" ");
		inorder(root.right);
	}
	
	//search element in BST*************
	
		public static boolean search(Node root,int key) {
			 if(root==null) {
				 return false;
			 }
			
			if(root.data>key) {   //left subtree
				return search(root.left,key);
			}else if(root.data==key) {
				return true;
			}else{   //right subtree
				return search(root.right,key);
			}
		}

	public static void main(String[] args) {
		
		int value[]= {5,1,3,4,2,7,9,55,90};
		Node root=null;
		for(int i=0;i<value.length;i++) {
			root=insert(root,value[i]);
		}
		 inorder(root);
		 System.out.println();
		 
		 if (search(root,1)) {
				System.out.println("found");
			}else {
			System.out.println("not found");
			}
		
		
		
		
	}

}
